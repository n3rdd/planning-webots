class PidController {
public:
    target_point_;
    sum_error_;
    
    double kp_, ki_, kd_;
    prev_error_;  // error[-1]
    prev2_error; // error[-2]

    PidController() {
        kp_ = ki_ = kd_ = 0;
        target_point_.x = target_point.y = 0;
        sum_error_.x = sum_error_.y = 0;
        prev_error_.x = prev_error_.y = 0;
        prev2_error_.x = prev2_error_.y = 0;
    }

};

void PidController::setPoint() {
    target_point_.x = target_point.x;
    target_point_.y = target_point.y;
}

void PidController::init() {
    kp_ = 0.97;
    ki_ = 0.05;
    kd_ = 50;
    target_point_.x = target_point.y = 0;
    sum_error_.x = sum_error_.y = 0;
    prev_error_.x = prev_error_.y = 0;
    prev2_error_.x = prev2_error_.y = 0;
}

double PidController::calcX() {
    error_x = target_point.x - cur_point.x;
    sum_error.x += error_x;
    if (sum_error.x > 10)  sum_error.x = 10;
    if (sum_error.x < -10)  sum_error.x = -10;
    
    diff_error_x = error_x - prev_error.x;
    prev_error.x = error_x;
    
    return kp * error_x + ki * sum_error.x + kd * diff_error_x;
}

double PidController::calcY() {
    error_x = target_point.x - cur_point.x;
    sum_error.x += error_x;
    if (sum_error.x > 10)  sum_error.x = 10;
    if (sum_error.x < -10)  sum_error.x = -10;
    
    diff_error_x = error_x - prev_error.x;
    prev_error.x = error_x;
    
    return kp * error_x + ki * sum_error.x + kd * diff_error_x;
}

cur_pos = worldToMap(pos[0], pos[1]);
idx = 0;
pid.init();
pid.setPoint(path[idx]);

// 计算 x, y 控制量
x_control = pid.calcXControl(cur);
y_control = pid.calcYControl(cur);

// 根据反馈量用键盘控制
key_x_control = getKeyX(x_control, curx);
key_y_control = getKeyY(y_control, cury);

// 根据键位设置电机速度
switch(key_x_control) {
    case 'W': {
        for (int i = 0; i < 4; i++) {
            speed_x[i] = speed_forward[i];
        }
        break;
    }
    case 'S': {
        for (int i = 0; i < 4; i++) {
            speed_x[i] = speed_backward[i];
        }
        break;
    }
    case ' ' : {
        for (int i = 0; i < 4; i++) {
            speed_x[i] = 0;
        }
    }
}
switch(key_y_control) {
    case 'A': {
        for (int i = 0; i < 4; i++) {
            speed_y[i] = speed_leftward[i];
        }
        break;
    }
    case 'D': {
        for (int i = 0; i < 4; i++) {
            speed_y[i] = speed_rightward[i];
        }
        break;
    }
    case ' ' : {
        for (int i = 0; i < 4; i++) {
            speed_y[i] = 0;
        }
    }
}
for (int i = 0; i < 4; i++) {
    motors[i]->setVelocity(speed_x[i] + speed_y[i]);
}
 